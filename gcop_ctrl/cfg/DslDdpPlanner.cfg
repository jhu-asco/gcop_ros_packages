#!/usr/bin/env python
PACKAGE = "gcop_ctrl"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#dilation of the obstacle
gen.add("dyn_obs_dilation_m",     double_t, 0, "The amount by which obstacles are expanded in meters ", 1, 0, 5)
enum_dilation_type = gen.enum([gen.const("MORPH_RECT",    int_t, 0, "rect"),  
                               gen.const("MORPH_CROSS",   int_t, 1, "cross"),
                               gen.const("MORPH_ELLIPSE", int_t, 2, "ellipse")],"An enum to set dilation type")
gen.add("dyn_dilation_type"  ,    int_t, 0, "Select the dilation type"  , 2, 0, 2, edit_method=enum_dilation_type)


gen.add("dyn_debug_on",           bool_t,   0, "enable debug", False)
gen.add("dyn_enable_motors",      bool_t,   0, "Enable motors so that ctrl cmds can be sent", False)
gen.add("dyn_max_speed",          double_t, 0, "Max speed for the vehicle", 0.7, 0.5, 1.5 )

gen.add("dyn_dsl_plan_once",    bool_t,   0, "plan the global path once", False)
gen.add("dyn_dsl_plan_loop",    bool_t,   0, "plan the global path in loop", False)
gen.add("dyn_dsl_interp_delt",  double_t, 0, "Interpolate dsl path with delt time step", 0.5, 0.01, 10 )
enum_dsl_interpolation_type = gen.enum([gen.const("LINEAR",    int_t, 0, "Linear interpolation between consecutive way points"),  
                               gen.const("CUBIC",   int_t, 1, "Using cubic spline x=f1(t) and y=f2(t)"),
                               gen.const("RBF", int_t, 2, "Using RBF(unimplemented)")],"An enum to set the dsl path interpolation type")
gen.add("dyn_dsl_interpolation_type"  ,    int_t, 0, "Select the dsl path interpolation type"  , 0, 0, 2, edit_method=enum_dsl_interpolation_type)

gen.add("dyn_ddp_from_curr_posn",bool_t,   0, "if enabled plans(ddp) from current position else from rivz start", False)
enum_ddp_goal_type = gen.enum([gen.const("T_SEC_AHEAD",    int_t, 0, "plan ddp for a point T sec ahead in global path"),  
                               gen.const("N_WAYPT_AHEAD",   int_t, 1, "plan ddp for a point N waypoint ahead in global path"),
                               gen.const("DSL_GOAL", int_t, 2, "plan ddp for a point T sec ahead in global path")],"An enum to set ddp goal type")
gen.add("dyn_ddp_goal_type"  ,    int_t, 0, "Select the ddp goal type"  , 2, 0, 2, edit_method=enum_ddp_goal_type)
gen.add("dyn_ddp_plan_once",     bool_t,   0, "plan the local path once", False) 
gen.add("dyn_ddp_plan_loop",     bool_t,   0, "plan the local path in loop", False)

# 


exit(gen.generate(PACKAGE, "dsl_ddp_planner", "DslDdpPlanner"))

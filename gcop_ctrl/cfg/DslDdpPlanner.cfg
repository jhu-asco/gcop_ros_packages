#!/usr/bin/env python
PACKAGE = "gcop_ctrl"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#dilation of the obstacle
gen.add("dyn_obs_dilation_m",     double_t, 0, "The amount by which obstacles are expanded in meters ", 1, 0, 5)
enum_dilation_type = gen.enum([gen.const("MORPH_RECT",    int_t, 0, "rect"),  
                               gen.const("MORPH_CROSS",   int_t, 1, "cross"),
                               gen.const("MORPH_ELLIPSE", int_t, 2, "ellipse")],"An enum to set dilation type")
gen.add("dyn_dilation_type"  ,    int_t, 0, "Select the dilation type"  , 2, 0, 2, edit_method=enum_dilation_type)


gen.add("dyn_debug_on",           bool_t,   0, "enable debug", False)
gen.add("dyn_enable_motors",      bool_t,   0, "Enable motors so that ctrl cmds can be sent", False)
#gen.add("dyn_max_speed",          double_t, 0, "Max speed for the vehicle", 0.7, 0.5, 1.5 )

gen.add("dyn_dsl_avg_speed",     double_t, 0, "Average car speed for dsl path", 0.6, 0.5, 1.5 )
gen.add("dyn_dsl_interp_deg"  ,  int_t,    0,    "Deg of interpolating B-spline.(1:linear 3:cubic..", 1, 1, 3)
gen.add("dyn_dsl_interp_delt",   double_t, 0, "Interpolate dsl path with delt time step", 0.5, 0.01, 10 )
gen.add("dyn_dsl_preint_delt",   double_t, 0, "Pre-interp delt for input to interpolation", 2, 0.1, 100 )
gen.add("dyn_dsl_from_curr_posn",bool_t,   0, "if enabled plans(dsl) from current position else from rivz start", False)
gen.add("dyn_dsl_plan_once",     bool_t,   0, "plan the global path once", False)
gen.add("dyn_dsl_plan_loop",     bool_t,   0, "plan the global path in loop", False)
gen.add("dyn_dsl_loop_durn",     double_t, 0, "duration after which dsl planning is called again",0.1, 0.01, 100 )
gen.add("dyn_dsl_disp_rviz",     bool_t,   0, "Display dsl path on rviz or not", True)

gen.add("dyn_ddp_from_curr_posn",bool_t,   0, "if enabled plans(ddp) from current position else from rivz start", False)
gen.add("dyn_ddp_t_away",        double_t, 0, "Choose a wpoint on dsl path which is t_away sec away", 0.5, 0.0, 100.0 )
gen.add("dyn_ddp_plan_once",     bool_t,   0, "plan the local path once", False) 
gen.add("dyn_ddp_plan_loop",     bool_t,   0, "plan the local path in loop", False)
gen.add("dyn_ddp_loop_durn",     double_t, 0, "duration after which ddp planning is called again",0.1, 0.01, 100 )
gen.add("dyn_ddp_disp_rviz",     bool_t,   0, "Display ddp path on rviz or not", True)

exit(gen.generate(PACKAGE, "dsl_ddp_planner", "DslDdpPlanner"))

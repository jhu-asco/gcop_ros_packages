#! /usr/bin/env python
# Create a cfg file for getting control parameters for dmoc optimal controller

PACKAGE = 'gcop_ctrl'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *
gen = ParameterGenerator()

#gen.add("iterate"     ,     bool_t     ,     0     ,     "Run one iteration of dmoc"  ,     False )
#gen.add("usemocap"     ,     bool_t     ,     0     ,     "To use mocap or not"  ,     False)
#       Name          		Type      level        Description   				      Default    Min   Max
gen.add("Nit"     , int_t    , 0x00000002 , "Number of iterations of dmoc"      , 1      , 0     , 30)
gen.add("tf"      , double_t , 0x00000002 , "Final Time"                        , 5      , 0     , 10)
#gen.add("N"      , int_t    , 0x00000002 , "Number of segments"                , 200    , 0     , 300)
gen.add("ureset"  , bool_t   , 0x00000002 , "reset control"                     , False)
gen.add("final"   , bool_t   , 0x00000001 , "Change final posn and joint"       , False)
gen.add("iterate" , bool_t   , 0x00000001 , "Iterate mbs Nit times"             , False)
gen.add("animate" , bool_t   , 0x00000001 , "Animate mbs 1 time"                , True)
gen.add("x"       , double_t , 0x00000002 , "base xposn"                        , 0.0    , -10   , 10)
gen.add("y"       , double_t , 0x00000002 , "base yposn"                        , 0.0    , -10   , 10)
gen.add("z"       , double_t , 0x00000002 , "base zposn"                        , 0.0    , -10   , 10)
gen.add("vx"      , double_t , 0x00000002 , "base body xvel"                    , 0.0    , -1    , 1)
gen.add("vy"      , double_t , 0x00000002 , "base body yvel"                    , 0.0    , -1    , 1)
gen.add("vz"      , double_t , 0x00000002 , "base body zvel"                    , 0.0    , -1    , 1)
gen.add("roll"    , double_t , 0x00000002 , "base roll"                         , 0.0    , -3.15 , 3.15)
gen.add("pitch"   , double_t , 0x00000002 , "base pitch"                        , 0.0    , -3.15 , 3.15)
gen.add("yaw"     , double_t , 0x00000002 , "base yaw"                          , 0.0    , -3.15 , 3.15)
gen.add("vroll"   , double_t , 0x00000002 , "base rollvel"                      , 0.0    , -1    , 1)
gen.add("vpitch"  , double_t , 0x00000002 , "base pitchvel"                     , 0.0    , -1    , 1)
gen.add("vyaw"    , double_t , 0x00000002 , "base yawvel"                       , 0.0    , -1    , 1)
gen.add("i_J"     , int_t    , 0x00000001 , "Joint index starting with 1"       , 1      , 1     , 40)
gen.add("Ji"      , double_t , 0x00000002 , "Jointangle"                        , 0      , -3.15 , 3.15)
gen.add("Jvi"     , double_t , 0x00000002 , "Jointanglevel"                     , 0      , -1.0  , 1.0)
gen.add("i_Q"     , int_t    , 0x00000001 , "StateCost_index starting with 1"   , 1      , 1     , 40)
gen.add("Qi"      , double_t , 0x00000002 , "Statecost"                         , 0      , 0     , 100)
gen.add("Qfi"     , double_t , 0x00000002 , "FinStatecost"                      , 50     , 0     , 100)
gen.add("i_R"     , int_t    , 0x00000001 , "ControlCost_index starting with 1" , 1      , 1     , 40)
gen.add("Ri"      , double_t , 0x00000002 , "Controlcost"                       , 1      , 0     , 10)
gen.add("mu"      , double_t , 0x00000002 , "Regularization constant"           , 0.001  , 0     , 100)

exit(gen.generate(PACKAGE, "Config", "MbsDMocInterface"))





#parameters to be used with dsl_ddp_yaml.cpp

###################################
debug_on: false  # Print important data on cout

###################################
# frame names
#   (un-modifiable in reconfigure)
#   strfrm_map:     The frame of origin of world
#   strfrm_robot:   The frame of origin of robot
#   strfrm_og:      The location of origin of the og(as obtained from gmapping)
strfrm_world: "/world"          
strfrm_robot: "/base_link"  
strfrm_og_org: "/og_org"

###################################
# Topic name(Input)
#   (un-modifiable in reconfigure)
#   strtop_odom:       odometry msg from state estimator
#   strtop_pose_start: initial pose
#   strtop_pose_goal:  goal pose
#   strtop_traj:       trajectory(what traj?)
#   strtop_og:         topic for original occ grid
strtop_odom:       "/insekf/odom"
strtop_pose_start: "/initialpose"
strtop_pose_goal:  "/move_base_simple/goal"
strtop_og:         "/map"

###################################
# Topic name(Output)
#   (un-modifiable in reconfigure)
#   strtop_diag: diagnostic messages
#   strtop_marker_rivz: change this name. This is where we send the traj to be plotted on rvizS
#   strtop_og_dild: topic for dilated occ grid
strtop_diag:        "/insekf/diag"
strtop_marker_rviz: "/visualization_marker"
strtop_og_dild:     "/map_occgrid_dialated"
strtop_ctrl:        "/ctrl_si"

###################################
# hz_var: frequency at which a message will be published
#   (un-modifiable in reconfigure)
#   value>0.0 will publish data at required frequency
#   value=0.0 will result in the data to be sent at the max freq
#   value<0.0 will disable puslishing the data 
hz_diag: -1.0  # Freq at which diagnostic data is published

###################################
# path colors and scale
#   path_dsl = [red,green,blue,alpha,scale]
#   size: width of the path line in meters
#   prop_wp is waypoint properties
prop_path_dsl:      [0.0,1.0,0.0,0.5,0.4]
prop_path_dsl_intp: [1.0,0.0,0.0,0.5,0.4]
prop_path_ddp:      [0.0,0.0,1.0,0.5,0.4]
prop_wp:        [0.0,0.0,0.0,1.0,0.18]


###################################
# DDP settings
#   Q: 0.5*x'Qx give the state cost per unit time
#   Qf:0.5*x'Qx give the terminal state cost
#   R: 0.5*u'Ru control cost per unit time
#   mu:
#   n: number of segments of trajectory(number of nodes=n+1)
#   niter: max number of iteration until convergence
#   tol: convergence tolerance. iter stops when ||f(x_{k+1}-f(x_{k}||<tol
#   TODO: have better convergence criteria and warn user if convergence is not achieved

ddp_Q:   [0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0]
ddp_Qf:  [0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0]
ddp_R:   [0.005, 0.0 
          0.0  , 0.001]
ddp_mu:  0.5
ddp_debug_on: False
ddp_N:   32
ddp_nit: 32
ddp_tol: 1e-10
     
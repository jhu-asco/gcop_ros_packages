#!/usr/bin/env python
PACKAGE = "gcop_ros_est"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#configure
gen.add("dyn_debug_on",    bool_t, 0, "Display debug data", True)

# configure ekf
gen.add("dyn_enable_mag",             bool_t, 0, "Use magnetometer in estimation or not", True)
gen.add("dyn_enable_gps",             bool_t, 0, "Use gps in estimation or not. Not using gps will give orientation only", True)

gen.add("dyn_cov_mag",   double_t, 4, "Duration of simulated data production", 1e-4, 0, 1)
gen.add("dyn_cov_acc",   double_t, 4, "Duration of simulated data production", 1e-4, 0, 1)
gen.add("dyn_cov_gyr",  double_t, 4, "Duration of simulated data production",  0.1, 0, 10)
gen.add("dyn_cov_gps_xy",double_t, 4, "Duration of simulated data production",    4, 0, 100)
gen.add("dyn_cov_gps_z", double_t, 4, "Duration of simulated data production",    1, 0, 100)

gen.add("dyn_reinitialize_filter",    bool_t, 0, "Reinitialize from the correct gps position", False)
gen.add("dyn_reinit_gyro_bias",    bool_t, 0, "Re-evaluate gyrobias", False)
gen.add("dyn_enable_true_yaw",        bool_t, 0, "Use true yaw for display(makes sense if mag is enabled) else keep constant", True)
gen.add("dyn_set_gps_z_cov0",         bool_t, 0, "Set gps z cov to zero", True)


gen.add("dyn_enable_imu_viz",         bool_t, 0, "Publish imu visualization messages", True)
gen.add("dyn_enable_cov_disp_gps",    bool_t, 0, "Enable display of covariance of gps", True)
gen.add("dyn_enable_cov_disp_est",    bool_t, 0, "Enable display of covariance of estimate", True)
gen.add("dyn_alpha_cov",              double_t, 0, "alpha of the covariance ellipse",0.7, 0, 1 )
gen.add("dyn_scale_imu_cov",          double_t, 0, "imu cov scale",1, 0.01, 10000 )

# Configure output
gen.add("dyn_enable_tf_publisher",    bool_t, 0, "Send estimated pose as TF", True)
gen.add("dyn_period_tf_publish",      double_t, 0, "duration after which a new tf message is sent",0.1, 0.01, 1 )
# magnetometer 
#put the calibration parameter



exit(gen.generate(PACKAGE, "gcop_insekf_test", "Insekf"))

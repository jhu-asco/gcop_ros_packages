#parameters to be used with gcop_insmagekf_test.cpp

###################################
pause:    false  #if true then it will pause at the first step of kalman filtering 
debug_on: true  # Print important data on cout
mag_on:   true # Perform mag update step
gps_on:   true  # Preform gps update step
diag_on:  true  # Publish diagnostics information on a topic
tf_on:    true  # Display poses as tf data

###################################

n_avg: 100 # Number of readings for mean and cov computation

###################################
# frame names
#   (un-modifiable in reconfigure)
#   strfrm_map:     The frame of origin of world
#   strfrm_robot:   The frame of origin of robot
#   strfrm_gps_lcl: The gps location with respect to map frame
strfrm_map: "/map"          
strfrm_robot: "/base_link"  
strfrm_gps_lcl: "/gps_lcl"

###################################
# Sensor format
# (un-modifiable in reconfigure)
#   0:Vector3Stamped
#   1:RosDefault
type_sensor_msg: 1

###################################
# Topic name(Input)
#   (un-modifiable in reconfigure)
strtop_pose: "/alvar/pose"

strtop_imu: "/imu_3dm/imu" #sensor format 1

strtop_acc_v3s: "" #sensor format 0
strtop_gyr_v3s: "" #sensor format 0

###################################
# Topic name(Output)
#   (un-modifiable in reconfigure)
strtop_odom:       "/insekf/odom"
strtop_diag:       "/insekf/diag"
strtop_marker_cov: "/visualization_marker"

###################################
# hz_var: frequency at which a message will be published
#   (un-modifiable in reconfigure)
#   value>0.0 will publish data at required frequency
#   value=0.0 will result in the data to be sent at the max freq
#   value<0.0 will disable puslishing the data 
hz_tf:   10.0  # Freq at which TF & cov for gps_lcl and base_link is published
hz_odom:  0.0  # Freq at which odometric data is published
hz_diag: -1.0  # Freq at which diagnostic data is published

###################################
# Mag reference
#   In the frame of the robot
#   (un-modifiable in reconfigure)
#   http://www.ngdc.noaa.gov/geomag-web/#igrfwmm
m0: [1.0 , 0.0 , 0.0 ]

# Acc reference
#   In the frame of the robots
#   (un-modifiable in reconfigure)
a0: [0.0 , 0.0 , 9.80665]

a0_tol: 0.4 # An acceleration reading with magnitude a0_tol more than a0.norm wont be used in correction step

###################################
# Sensor relative position 
#   (un-modifiable in reconfigure)
#   robot2sensor: [x y z qx qy qz qw]
robot2gyr:  [ 0.0 , 0.0 , 0.0 , 0.000 , 0.000 , 0.000 , 1.000]
robot2acc:  [ 0.0 , 0.0 , 0.0 , 0.000 , 0.000 , 0.000 , 1.000]

###################################
# InsState initialization 
#   (not modifiable in dynamic reconfigure)
#   cov: ["yaml", 0.1 , 0.1 , 0.1] 
#     Load the covariance from this yaml file.
#   cov: ["est"]
#     Estimate upon startup. Note that the sensor has to be still for first 2 seconds
#   Rotation matrix init
#x0_R: ['yaml',1.0, 0.0, 0.0,
#              0.0, 1.0, 0.0,
#              0.0, 0.0, 1.0]
#x0_R_cov: ['yaml',0.1, 0.1 , 0.1]
x0_R: ["est"]   #estimated from acc and mag readings                     
x0_R_cov:  ["est"] # 
         
#   Gyro bias init
#   "average": Average the readings for t_bg seconds
x0_bg:   ["est"]
x0_bg_cov: ["est"]  #set to gyro cov
#x0_bg:     ["yaml", 5.03964e-05 ,-0.0122746   , -0.000642936]
#x0_bg_cov: ["yaml", 7.83654e-06 , 1.95854e-05 ,  1.61591e-05]

#   Accelerometer bias init
x0_ba:     ["yaml", 0.0     , 0.0     , 0.0]
x0_ba_cov: ["yaml", 1.0e-6 , 1.0e-6 , 1.0e-6]
#x0_ba: ["est"]
#x0_ba_cov: ["est"]


#   Position init
#x0_p:     ["yaml", 0.0     , 0.0     , 0.0]
#x0_p_cov: ["yaml", 1.0 , 1.0 , 0.4]
x0_p:  ["est"] #It will be initialized with gps reading relative to map0 param(find below)      
x0_p_cov: ["est"] # Will be initialized with gps cov

#   Velocity init
x0_v: ["yaml", 0.0, 0.0, 0.0]
x0_v_cov: ["yaml", 1.0e-4 , 1.0e-4 , 1.0e-4]


###################################
# Control Noise Parameter
#   Options: 
#   cov: ["dyn", cov_x, cov_y, cov_z]
#     Use the mentioned cov which is also modifiable in dynamic reconfigure
#   cov: ["msg"]
#     Use covariance provided in the sensor msgs
#   cov: ["est"]
#     Evaluate the covariance upon startup. Note that the sensor has to be still for first 2 seconds

 
cov_ctrl_gyr:  ["dyn",4.89057e-07, 4.43908e-07, 4.01957e-07]
#cov_ctrl_gyr: ["msg"]
#cov_ctrl_gyr: ["est"]
cov_ctrl_acc:  ["dyn",1.0,1.0,1.0] 
#cov_ctrl_acc: ["msg"]
#cov_ctrl_acc: ["est"]
cov_ctrl_su: ["dyn",9.0e-16,9.0e-16,9.0e-16]  # gyro bias rate-of-change white noise stdev (spectral density)
cov_ctrl_sa: ["dyn",9.0e-16,9.0e-16,9.0e-16]  #acceleration bias rate-of-change white noise stdev (spectral density)
    
###################################
# Sensor Noise parameters
#   Options: 
#   cov: ["dyn", cov_x, cov_y, cov_z]
#     Use the mentioned cov which is also modifiable in dynamic reconfigure
#   cov: ["msg"]
#     Use covariance provided in the sensor msgs
#   cov: ["est"]
#     Evaluate the covariance upon startup. Note that the sensor has to be still for first 2 seconds
cov_sens_mag:  ["dyn",1.0e-1,1.0e-1,1.0e-1] #covariance of the magnetometer where the readings lie on a unit sphere
#cov_sens_mag: ["msg"]
#cov_sens_mag: ["est"]
cov_sens_acc:  ["dyn", 1.0e-2,1.0e-2,1.0e-2]
#cov_sens_acc: ["msg"]
#cov_sens_acc: ["est"]
#cov_sens_gps: ["dyn",4.0,4.0,1.0]
cov_sens_pos: ["msg"]
#cov_sens_pos: ["est"]

###################################
#scaling to convert the imu readings to si units
scale2si_gyr: 1.0 #already in si
scale2si_acc: 1.0 #already in si

###################################
#Apply following transformation to incoming pose
box2robot_linear:      [-1.0 , 0.0 , 0.0,
                         0.0 , 0.0 , 1.0,
                         0.0 , 1.0 , 0.0]
                  
box2robot_translation: [0.23 , -0.53 , -0.14]

###################################
# Magnetometer calibration parameter
#   (un-modifiable in reconfigure)
#   linear and translation refers to components for Eigen::Transform
#   The transform takes the raw magnetometer reading translates to origin and scales
#     it along appropriate eigen vectors such that all readings lie on a unit sphere
#     and puts them into the right hand coordinate system( many mag sensors don't)    
#     which is in the frame of the robot(thats is why there is no robot2mag param above)       
magcal_linear: [ 2.055806304956569 , -0.001600512428434 , -0.001561780474196,
                -0.001600512428434 ,  2.065625437112922 , -0.001906772438880,
                -0.001561780474196 , -0.001906772438880 ,  2.069067781541600]
                  
magcal_translation: [-0.014150482239228 , -0.051927554201718  , 0.013123589846202]

# Accelerometer calibration parameter
#   (un-modifiable in reconfigure)
#   linear and translation refers to components for Eigen::Transform
#   The transform takes the raw magnetometer reading translates to origin and scales
#     it along appropriate eigen vectors such that all readings lie on a unit sphere
#     assuming that the accelerometer gives reading in units of g
acccal_linear:    [1.0 , 0.0 , 0.0,
                   0.0 , 1.0 , 0.0,
                   0.0 , 0.0 , 1.0]
                  
acccal_translation: [0.0 , 0.0 , 0.0]

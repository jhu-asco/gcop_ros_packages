#parameters to be used with gcop_insmagekf_test.cpp

# InsState initialization
# sometimes position relative to gps is not necessary
# gravity compensated frame is probably good enough 
#   Rotation matrix init
x0_R_cov:  [0.1 , 0.1 , 0.1]             
#   Gyro bias init
#   "average": Average the readings for t_bg seconds
x0_bg: "average"
x0_bg_cov: [0.002 , 0.002 , 0.002]
#   Accelerometer bias init
x0_ba: [0.0 , 0.0 , 0.0]
x0_ba_cov: [1e-10 , 1e-10 , 1e-10]
#   Position init
#   "gps":         Init from gps 
#   [0.0,0.0,0.0]: Initialized by value 
x0_p:  "gps"         
x0_ba_cov: [4.0 , 4.0 , 1.0] #ignored when "gps" is selected
#   Velocity init
#   "gps":         Initialized from gps
#   [0.0,0.0,0.0]: Initialized by value
x0_v:  "gps"
x0_v_cov: [0.04 , 0.04 , 0.04]

# Sensor format
# (un-modifiable in reconfigure)
#   0:Vector3Stamped
#   1:RosDefault
type_sensor_msg: 1

# Topic name
#   (un-modifiable in reconfigure)
strtop_gps: "/mavros/fix" #common to both sensor format0 and format1

strtop_imu: "/mavros/imu/imu_raw" #sensor format 1
strtop_mag: "/mavros/imu/mag" #sensor format 1

strtop_mag_v3s: ""  #sensor format 0
strtop_acc_v3s: ""  #sensor format 0
strtop_gyr_v3s: ""  #sensor format 0


# frame names
#   (un-modifiable in reconfigure)
#   strfrm_map:     The frame of origin of world
#   strfrm_robot:   The frame of origin of robot
#   strfrm_gps_lcl: The gps location with respect to map frame
strfrm_map: "/map"          
strfrm_robot: "/base_link"  
strfrm_gps_lcl: "/gps_lcl"

# Sensor relative position type
# (un-modifiable in reconfigure)
#   0:information using tf(unimplemented)
#   1:from a file/parameters
type_rel_tf: 1

#   TF:(Sensor relative position type 0)
frame_id_robot: "fcu"
frame_id_imu:   ""
frame_id_gyr:   ""
frame_id_acc:   ""
frame_id_mag:   ""
frame_id_gps:   ""


#   from file(Sensor relative position type 1)
#   [x y z qx qy qz qw]
robot2gyr:  [ 0.0 , 0.0 , 0.0 , 0.000 , 0.000 , 0.000 , 1.000]
robot2acc:  [ 0.0 , 0.0 , 0.0 , 0.000 , 0.000 , 0.000 , 1.000]
robot2gps:  [ 0.0 , 0.0 , 0.0 , 0.000 , 0.000 , 0.000 , 1.000]

# Noise parameters
#   (modifiable in reconfigure)
cov_sel:    0    #0: selection from params/reconfigure 1: selection from sensor message when available
cov_mag:    1e-10 #covariance of the magnetometer where the readings lie on a unit sphere
cov_acc:    1e-2
cov_gyr:    1e-5 
cov_gps_xy: 4.0
cov_gps_z:  1.0

#scaling to convert the imu readings to si units
#  for gyro: rads/sec and for acc:m/se^2
scale2si_gyr: 1.0 #already in si
scale2si_acc: 1.0 #already in si

# Origin of map frame in [lat(deg) , lon(deg) , alt(m)]
# (un-modifiable in reconfigure)
map0: [39.3257305556 , -76.6223472222 , 0.0]

# Mag reference
#   For the above map0
#   In the frame of the robot
#   (un-modifiable in reconfigure)
#   http://www.ngdc.noaa.gov/geomag-web/#igrfwmm
m0: [-4045.4 , 20503.7, -47202.3]

# Acc reference
#   In the frame of the robots
#   (un-modifiable in reconfigure)
a0: [0.0 , 0.0 , 9.80665]

# Magnetometer calibration parameter
#   (un-modifiable in reconfigure)
#   linear and translation refers to components for Eigen::Transform
#   The transform takes the raw magnetometer reading translates to origin and scales
#     it along appropriate eigen vectors such that all readings lie on a unit sphere
#     and puts them into the right hand coordinate system( many mag sensors don't)    
#     which is in the frame of the robot(thats is why there is no robot2mag param above)       
magcal_linear:      [-0.062949872640317e4 , 2.273324797353632e4 , 0.001240242291801e4,
                     -2.154178589047590e4 , 0.062949872640317e4 , 0.034343121079356e4,
                     -0.034343121079356e4 , 0.001240242291801e4 , 2.468964306660896e4]
                  
magcal_translation: [-0.284005441644962   , 0.201320273998919   , 0.333901512305726]  

# Accelerometer calibration parameter
#   (un-modifiable in reconfigure)
#   linear and translation refers to components for Eigen::Transform
#   The transform takes the raw magnetometer reading translates to origin and scales
#     it along appropriate eigen vectors such that all readings lie on a unit sphere
#     assuming that the accelerometer gives reading in units of g
acccal_linear:  [0.971611407904773 , -0.000820915220433 ,  0.000778412214922,
                -0.000820915220433 ,  0.985891072947463 , -0.000211736405367,
                 0.000778412214922 , -0.000211736405367 ,  0.965471268022928]
    
acccal_translation: [-0.007418045344934 , -0.040701211637869 , -0.069864932729539]